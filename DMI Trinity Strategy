// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© pidepython / https://www.fiverr.com/alighazanfer59/build-algotrading-backtesting-screening-data-tools

//@version=6
strategy("DMI Trintiy Strategy v2", overlay=true, default_qty_type=strategy.fixed, default_qty_value=2)

//========== PHASE 1: CORE FRAMEWORK ==========//
//--- 3. Indicator Parameters ---//
i_dmiThreshold = input.int(25, "DMI Threshold.", minval=1, group="DMI/ADX Settings", tooltip = "Threshold value of DMI to trigger entry conditions")
i_adxThreshold = input.int(25, "ADX Threshold.", minval=1, group="DMI/ADX Settings", tooltip = "Threshold value of ADX to trigger entry conditions")
i_atrLength = input.int(10, "ATR Length", minval=1, group = "TASC Indicator Settings", tooltip = "TASC supertrend Calculation, a lower value will make the system more sensitive to trend reversal")
i_mult = input.float(3.0, "Multiplier", minval=0.1, step=0.1, group = "TASC Indicator Settings", tooltip = "TASC supertrend Calculation, a lower value will make the system more sensitive to trend reversal")

//--- 1. Timeframe Selection ---//
tf1 = input.bool(false, "1 Minutes:     ", group="Timeframe Selection", inline="1", display = display.none)
i_dmiLength_tf1 = input.int(9, "Length", minval=1, group="Timeframe Selection", inline = "1")
i_dmiThreshold_tf1 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "1")

tf2 = input.bool(false, "2 Minutes:     ", group="Timeframe Selection", inline="2", display = display.none)
i_dmiLength_tf2 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "2")
i_dmiThreshold_tf2 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "2")

tf3 = input.bool(false, "3 Minutes:     ", group="Timeframe Selection", inline="3", display = display.none)
i_dmiLength_tf3 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "3")
i_dmiThreshold_tf3 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "3")

tf5 = input.bool(false, "5 Minutes:      ", group="Timeframe Selection", inline="4", display = display.none)
i_dmiLength_tf5 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "4")
i_dmiThreshold_tf5 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "4")

tf15 = input.bool(false, "15 Minutes:        ", group="Timeframe Selection", inline="5", display = display.none)
i_dmiLength_tf15 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "5")
i_dmiThreshold_tf15 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "5")

tf30 = input.bool(false, "30 Minutes:       ", group="Timeframe Selection", inline="6", display = display.none)
i_dmiLength_tf30 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "6")
i_dmiThreshold_tf30 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "6")

tf60 = input.bool(false, "1 Hour:       ", group="Timeframe Selection", inline="7", display = display.none)
i_dmiLength_tf60 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "7")
i_dmiThreshold_tf60 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "7")

tf240 = input.bool(false, "4 Hours:     ", group="Timeframe Selection", inline="8", display = display.none)
i_dmiLength_tf240 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "8")
i_dmiThreshold_tf240 = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "8")

tfD = input.bool(false, "Daily:     ", group="Timeframe Selection", inline="9", display = display.none)
i_dmiLength_tfD = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "9")
i_dmiThreshold_tfD = input.float(25, "Thresh", minval=1, group="Timeframe Selection", inline = "9")
bool anyTFSelected = tf1 or tf2 or tf3 or tf5 or tf15 or tf30 or tf60 or tf240 or tfD

//--- 2. Filter Environment Selection ---//
conditionType = input.string("DMI", "Filter Environment Type", options=["DMI", "ADX"], group="Strategy Settings")

//--- 4. Trigger Conditions ---//
useTASC_SE = input.bool(false, "TASC Change of Structure entry signal", group="Trigger Settings")
useTASC_CE = input.bool(false, " TASC trend continuation entry signal", group="Trigger Settings")
useDMI = input.bool(false, "1-minute DMI alignment entry signal", group="Trigger Settings")

//--- 5. Trading Session ---//
in_time_sess_en = input.bool(true, "Limit trading hours?", group = "Time Settings")
in_time_sess = input.session("0930-1600", "Session hours", group = "Time Settings")
t = time(timeframe.period, in_time_sess, "US/Eastern")
time_sess_good = in_time_sess_en ? time == t : true
bgcolor((time == t and  in_time_sess_en) ? color.rgb(167, 175, 167) : na)

//--- 6. Trade Management ---//
i_contracts = input.int(2, "Contract Quantity", minval=1, group="Trade Management")
i_tp1_pts = input.int(20, "Take Profit (TP1) Points", minval=1, group="Trade Management")
i_tp2_pts = input.int(40, "Take Profit (TP2) Points", minval=1, group="Trade Management")
i_slPoints = input.int(20, "Stop Loss Points", minval=1, group="Trade Management")
i_breakeven_pts = input.int(3, "Breakeven Points", minval=0, group="Trade Management")
i_market_mv_to_BE = input.bool(false, "Enable Move to Breakeven", group="Trade Management")
i_pts_to_BE = input.int(10, "Points to Trigger Breakeven", group="Trade Management")
i_daily_profit_target = input.float(10000.0, "Daily Profit Target (USD)", minval=100.0, step = 100.0, group = "Trade Management")
i_daily_loss_limit = input.float(10000.0, "Daily Loss Limit (USD)", minval=100.0, step = 100.0, group = "Trade Management")


// === Daily PnL Tracking Based on End-of-Day Equity === //
var float equity_at_yesterday_close = na
var float equity_at_today_open = na
var float daily_pnl = 0.0
var bool can_trade_today = true

// Detect new day by change in dayofyear
var int last_day = dayofmonth
bool is_new_day = dayofmonth != last_day
if is_new_day
    equity_at_yesterday_close := nz(strategy.equity[1])
    equity_at_today_open := strategy.equity
    last_day := dayofmonth

// Update daily_pnl continuously throughout the day
daily_pnl := strategy.equity - equity_at_today_open

// Disable trading if outside limits
can_trade_today := (daily_pnl < i_daily_profit_target) and (daily_pnl > -i_daily_loss_limit)

// ================================================================================== INDICATOR CODE ===============================================================================================================

// TASC calculation:

float multi  = i_mult  // (reuse the i_mult input)
int   length = i_atrLength  // (reuse the i_atrLength input)

[st, dir] = ta.supertrend(multi, length)

var bool isNewTrend = false
isNewTrend := ta.change(dir) != 0

plot(dir < 0 and (useTASC_SE or useTASC_CE) ? st : na, "Up direction", color = color.green, style=plot.style_steplinebr, linewidth = 4)
plot(dir > 0 and (useTASC_SE or useTASC_CE) ? st : na, "Down direction", color = color.red, style=plot.style_steplinebr, linewidth = 4)

// Trading signals
bool TASCbuyCondition = useTASC_SE and (isNewTrend and dir == -1)
bool TASCsellConditon = useTASC_SE and (isNewTrend and dir == 1)

// ===== PHASE 2: MTF DMI/ADX LOGIC ===== //
// Initialize condition arrays

// === Function to compute DI+, DI-, and ADX ===
f_dmiADX(_length, _srcHigh, _srcLow, _srcClose, _averageType) =>
    hiDiff = _srcHigh - _srcHigh[1]
    loDiff = _srcLow[1] - _srcLow

    plusDM = (hiDiff > loDiff and hiDiff > 0) ? hiDiff : 0
    minusDM = (loDiff > hiDiff and loDiff > 0) ? loDiff : 0

    tr = ta.tr(true)
    
    atr = switch _averageType
        "SMA" => ta.sma(tr, _length)
        "EMA" => ta.ema(tr, _length)
        "WMA" => ta.wma(tr, _length)
        => ta.rma(tr, _length)  // Default to Wilders

    _plusDI = switch _averageType
        "SMA" => ta.sma(plusDM, _length)
        "EMA" => ta.ema(plusDM, _length)
        "WMA" => ta.wma(plusDM, _length)
        => ta.rma(plusDM, _length)

    plusDI = 100 * _plusDI / atr

    _minusDI = switch _averageType
        "SMA" => ta.sma(minusDM, _length)
        "EMA" => ta.ema(minusDM, _length)
        "WMA" => ta.wma(minusDM, _length)
        => ta.rma(minusDM, _length)

    minusDI = 100 * _minusDI / atr

    dx = (plusDI + minusDI > 0) ? 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI) : 0

    adx = switch _averageType
        "SMA" => ta.sma(dx, _length)
        "EMA" => ta.ema(dx, _length)
        "WMA" => ta.wma(dx, _length)
        => ta.rma(dx, _length)

    [plusDI, minusDI, adx]

averageType = input.string("WILDERS", options=["WILDERS", "SMA", "EMA", "WMA"], title="Average Type", group = "DMI/ADX Settings")

// [diPlus, diMinus, adx] = f_dmiADX(length, high, low, close, averageType)

// DMI Wrapper
dmiWrapper(length) =>
    [dip, din, adx] = f_dmiADX(length, high, low, close, averageType)
    [dip, din, adx]

// Function to check DMI condition for a given timeframe
checkDmiCondition(string timeframe, int diLength, float threshold, bool isBullish) =>
    // !!! WARNING: barmerge.lookahead_on introduces repainting !!!
    // This allows reading DMI values from developing (not yet closed) candles on higher timeframes.
    // Historical signals may change as higher timeframe candles close.

    [diPlus, diMinus, adx] = request.security(syminfo.tickerid, timeframe, dmiWrapper(length), barmerge.gaps_off, barmerge.lookahead_on)

    if isBullish
        // D+ is greater than or equal to threshold AND D+ is dominant (>= D-)
        diPlus >= threshold and diPlus >= diMinus
    else
    // D- is greater than or equal to threshold AND D- is dominant (>= D+)
        diMinus >= threshold and diMinus >= diPlus


// Declare variables to store results of DMI conditions for each timeframe
var bool dmi1m_bull_val    = true
var bool dmi1m_bear_val    = true

var bool dmi2m_bull_val    = true
var bool dmi2m_bear_val    = true

var bool dmi3m_bull_val    = true
var bool dmi3m_bear_val    = true

var bool dmi5m_bull_val    = true
var bool dmi5m_bear_val    = true

var bool dmi15m_bull_val   = true
var bool dmi15m_bear_val   = true

var bool dmi30m_bull_val   = true
var bool dmi30m_bear_val   = true

var bool dmi60m_bull_val   = true
var bool dmi60m_bear_val   = true

var bool dmi240m_bull_val  = true
var bool dmi240m_bear_val  = true

var bool dmiD_bull_val     = true
var bool dmiD_bear_val     = true


// Assign results unconditionally on every bar to prevent "might not execute" warnings.
if tf1
    dmi1m_bull_val   := checkDmiCondition("1", i_dmiLength_tf1, i_dmiThreshold_tf1, true)
    dmi1m_bear_val   := checkDmiCondition("1", i_dmiLength_tf1, i_dmiThreshold_tf1, false)
if tf2
    dmi2m_bull_val   := checkDmiCondition("2", i_dmiLength_tf2, i_dmiThreshold_tf2, true)
    dmi2m_bear_val   := checkDmiCondition("2", i_dmiLength_tf2, i_dmiThreshold_tf2, false)
if tf3
    dmi3m_bull_val   := checkDmiCondition("3", i_dmiLength_tf3, i_dmiThreshold_tf3, true)
    dmi3m_bear_val   := checkDmiCondition("3", i_dmiLength_tf3, i_dmiThreshold_tf3, false)
if tf5
    dmi5m_bull_val   := checkDmiCondition("5", i_dmiLength_tf5, i_dmiThreshold_tf5, true)
    dmi5m_bear_val   := checkDmiCondition("5", i_dmiLength_tf5, i_dmiThreshold_tf5, false)
if tf15
    dmi15m_bull_val  := checkDmiCondition("15", i_dmiLength_tf15, i_dmiThreshold_tf15, true)
    dmi15m_bear_val  := checkDmiCondition("15", i_dmiLength_tf15, i_dmiThreshold_tf15, false)
if tf30
    dmi30m_bull_val  := checkDmiCondition("30", i_dmiLength_tf30, i_dmiThreshold_tf30, true)
    dmi30m_bear_val  := checkDmiCondition("30", i_dmiLength_tf30, i_dmiThreshold_tf30, false)
if tf60
    dmi60m_bull_val  := checkDmiCondition("60", i_dmiLength_tf60, i_dmiThreshold_tf60, true)
    dmi60m_bear_val  := checkDmiCondition("60", i_dmiLength_tf60, i_dmiThreshold_tf60, false)
if tf240
    dmi240m_bull_val := checkDmiCondition("240", i_dmiLength_tf240, i_dmiThreshold_tf240, true)
    dmi240m_bear_val := checkDmiCondition("240", i_dmiLength_tf240, i_dmiThreshold_tf240, false)
if tfD
    dmiD_bull_val    := checkDmiCondition("D", i_dmiLength_tfD, i_dmiThreshold_tfD, true)
    dmiD_bear_val    := checkDmiCondition("D", i_dmiLength_tfD, i_dmiThreshold_tfD, false)

bool dmibuyCond_curr = (
     dmi1m_bull_val and dmi2m_bull_val and dmi3m_bull_val and dmi5m_bull_val and
     dmi15m_bull_val and dmi30m_bull_val and dmi60m_bull_val and dmi240m_bull_val and dmiD_bull_val
 )

bool dmibuyCond_prev = (
     (not dmi1m_bull_val[1] and tf1) or
     (not dmi2m_bull_val[1] and tf2) or
     (not dmi3m_bull_val[1] and tf3) or
     (not dmi5m_bull_val[1] and tf5) or
     (not dmi15m_bull_val[1] and tf15) or
     (not dmi30m_bull_val[1] and tf30) or
     (not dmi60m_bull_val[1] and tf60) or
     (not dmi240m_bull_val[1] and tf240) or
     (not dmiD_bull_val[1] and tfD)
 )

dmibuyTrigger = dmibuyCond_curr and dmibuyCond_prev

bool dmisellCond_curr = (
     dmi1m_bear_val and dmi2m_bear_val and dmi3m_bear_val and dmi5m_bear_val and
     dmi15m_bear_val and dmi30m_bear_val and dmi60m_bear_val and dmi240m_bear_val and dmiD_bear_val
 )

bool dmisellCond_prev = (
     (not dmi1m_bear_val[1] and tf1) or
     (not dmi2m_bear_val[1] and tf2) or
     (not dmi3m_bear_val[1] and tf3) or
     (not dmi5m_bear_val[1] and tf5) or
     (not dmi15m_bear_val[1] and tf15) or
     (not dmi30m_bear_val[1] and tf30) or
     (not dmi60m_bear_val[1] and tf60) or
     (not dmi240m_bear_val[1] and tf240) or
     (not dmiD_bear_val[1] and tfD)
 )

dmisellTrigger = dmisellCond_curr and dmisellCond_prev

// Initialize ADX bool filters for each timeframe
checkAdxCondition(string timeframe, int diLength, float threshold) =>
    [_, _, adx] = request.security(syminfo.tickerid, timeframe, dmiWrapper(diLength), barmerge.gaps_off, barmerge.lookahead_on)
    adx >= threshold

var bool adx1m_bull_val    = true
var bool adx1m_bear_val    = true

var bool adx2m_bull_val    = true
var bool adx2m_bear_val    = true

var bool adx3m_bull_val    = true
var bool adx3m_bear_val    = true

var bool adx5m_bull_val    = true
var bool adx5m_bear_val    = true

var bool adx15m_bull_val   = true
var bool adx15m_bear_val   = true

var bool adx30m_bull_val   = true
var bool adx30m_bear_val   = true

var bool adx60m_bull_val   = true
var bool adx60m_bear_val   = true

var bool adx240m_bull_val  = true
var bool adx240m_bear_val  = true

var bool adxD_bull_val     = true
var bool adxD_bear_val     = true

if tf1 and conditionType == "ADX"
    adx1m_bull_val := checkAdxCondition("1", i_dmiLength_tf1, i_dmiThreshold_tf1)
    adx1m_bear_val := checkAdxCondition("1", i_dmiLength_tf1, i_dmiThreshold_tf1)

if tf2 and conditionType == "ADX"
    adx2m_bull_val := checkAdxCondition("2", i_dmiLength_tf2, i_dmiThreshold_tf2)
    adx2m_bear_val := checkAdxCondition("2", i_dmiLength_tf2, i_dmiThreshold_tf2)

if tf3 and conditionType == "ADX"
    adx3m_bull_val := checkAdxCondition("3", i_dmiLength_tf3, i_dmiThreshold_tf3)
    adx3m_bear_val := checkAdxCondition("3", i_dmiLength_tf3, i_dmiThreshold_tf3)

if tf5 and conditionType == "ADX"
    adx5m_bull_val := checkAdxCondition("5", i_dmiLength_tf5, i_dmiThreshold_tf5)
    adx5m_bear_val := checkAdxCondition("5", i_dmiLength_tf5, i_dmiThreshold_tf5)

if tf15 and conditionType == "ADX"
    adx15m_bull_val := checkAdxCondition("15", i_dmiLength_tf15, i_dmiThreshold_tf15)
    adx15m_bear_val := checkAdxCondition("15", i_dmiLength_tf15, i_dmiThreshold_tf15)

if tf30 and conditionType == "ADX"
    adx30m_bull_val := checkAdxCondition("30", i_dmiLength_tf30, i_dmiThreshold_tf30)
    adx30m_bear_val := checkAdxCondition("30", i_dmiLength_tf30, i_dmiThreshold_tf30)

if tf60 and conditionType == "ADX"
    adx60m_bull_val := checkAdxCondition("60", i_dmiLength_tf60, i_dmiThreshold_tf60)
    adx60m_bear_val := checkAdxCondition("60", i_dmiLength_tf60, i_dmiThreshold_tf60)

if tf240 and conditionType == "ADX"
    adx240m_bull_val := checkAdxCondition("240", i_dmiLength_tf240, i_dmiThreshold_tf240)
    adx240m_bear_val := checkAdxCondition("240", i_dmiLength_tf240, i_dmiThreshold_tf240)

if tfD and conditionType == "ADX"
    adxD_bull_val := checkAdxCondition("D", i_dmiLength_tfD, i_dmiThreshold_tfD)
    adxD_bear_val := checkAdxCondition("D", i_dmiLength_tfD, i_dmiThreshold_tfD)

// Final ADX Buy Condition
bool adxbuyCond = (adx1m_bull_val and adx2m_bull_val and adx3m_bull_val and adx5m_bull_val and adx15m_bull_val and
     adx30m_bull_val and adx60m_bull_val and adx240m_bull_val and adxD_bull_val)
// Final ADX Sell Condition
bool adxsellCond = (adx1m_bear_val and adx2m_bear_val and adx3m_bear_val and adx5m_bear_val and adx15m_bear_val and
     adx30m_bear_val and adx60m_bear_val and adx240m_bear_val and adxD_bear_val)
// TASC continuation signal

barsSinceNewTrend = ta.barssince(isNewTrend) + 1
trend_sw_high = not na(barsSinceNewTrend) ? ta.highest(high, barsSinceNewTrend) : na
trend_sw_low = not na(barsSinceNewTrend) ? ta.lowest(low, barsSinceNewTrend) : na

TASC_Cont_buyCond = (st > st[1] and dir == -1 and trend_sw_high > trend_sw_high[1]) and useTASC_CE
TASC_Cont_sellCond = (st < st[1] and dir == 1 and trend_sw_low < trend_sw_low[1]) and useTASC_CE

// =============================================================================== ENTRY SIGNALS ====================================================================================== //
// Final Trading signals - Buy
bool buySignal = false
filteredBuyCond = conditionType == "DMI" ? dmibuyCond_curr : adxbuyCond

if useDMI and useTASC_SE and useTASC_CE
    buySignal := (dmibuyTrigger and close > open) and (TASCbuyCondition or TASC_Cont_buyCond) and can_trade_today and time_sess_good and strategy.position_size == 0
else if useDMI and useTASC_SE
    buySignal := (dmibuyTrigger and close > open) and TASCbuyCondition and can_trade_today and time_sess_good and strategy.position_size == 0
else if useDMI and useTASC_CE
    buySignal := (dmibuyTrigger and close > open) and TASC_Cont_buyCond and can_trade_today and time_sess_good and strategy.position_size == 0
else if useTASC_SE and useTASC_CE
    buySignal := (TASCbuyCondition or TASC_Cont_buyCond) and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredBuyCond
else if useDMI
    buySignal := (dmibuyTrigger and close > open) and can_trade_today and time_sess_good and strategy.position_size == 0
else if useTASC_SE
    buySignal := TASCbuyCondition and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredBuyCond
else if useTASC_CE
    buySignal := TASC_Cont_buyCond and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredBuyCond
else
    buySignal := false

// Final Trading signals - Sell
bool sellSignal = false
filteredSellCond = conditionType == "DMI" ? dmisellCond_curr : adxsellCond

if useDMI and useTASC_SE and useTASC_CE
    sellSignal := (dmisellTrigger and close < open) and (TASCsellConditon or TASC_Cont_sellCond) and can_trade_today and time_sess_good and strategy.position_size == 0
else if useDMI and useTASC_SE
    sellSignal := (dmisellTrigger and close < open) and TASCsellConditon and can_trade_today and time_sess_good and strategy.position_size == 0
else if useDMI and useTASC_CE
    sellSignal := (dmisellTrigger and close < open) and TASC_Cont_sellCond and can_trade_today and time_sess_good and strategy.position_size == 0
else if useTASC_SE and useTASC_CE
    sellSignal := (TASCsellConditon or TASC_Cont_sellCond) and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredSellCond
else if useDMI
    sellSignal := (dmisellTrigger and close < open) and can_trade_today and time_sess_good and strategy.position_size == 0
else if useTASC_SE
    sellSignal := TASCsellConditon and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredSellCond
else if useTASC_CE
    sellSignal := TASC_Cont_sellCond and can_trade_today and time_sess_good and strategy.position_size == 0 and filteredSellCond
else
    sellSignal := false

// Save stops & targets
var float longStop = na
var float shortStop = na
var float longTarget1 = na
var float shortTarget1 = na
var float longTarget2 = na
var float shortTarget2 = na
var float tradeSize = na

// Strategy execution
if buySignal 
    strategy.entry("Long", strategy.long, qty=i_contracts)
    longStop := na
    longTarget1 := na
    longTarget2 := na

if sellSignal
    strategy.entry("Short", strategy.short, qty=i_contracts)
    shortStop := na
    shortTarget1 := na
    shortTarget2 := na

// Handle long stops & target calculation
if strategy.position_size > 0 and na(longStop)
    longStop := strategy.position_avg_price - i_slPoints
    longTarget1 := strategy.position_avg_price + i_tp1_pts
    longTarget2 := strategy.position_avg_price + i_tp2_pts
    tradeSize := strategy.position_size
    strategy.exit(id="Long Exit #1",  from_entry="Long",  limit=longTarget1, stop=longStop, qty = i_contracts/2)
    strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)

// Handle short stops & target calculation
if strategy.position_size < 0 and na(shortStop)
    shortStop := strategy.position_avg_price + i_slPoints
    shortTarget1 := strategy.position_avg_price - i_tp1_pts
    shortTarget2 := strategy.position_avg_price - i_tp2_pts
    tradeSize := strategy.position_size
    strategy.exit(id="Short Exit #1", from_entry="Short", limit=shortTarget1, stop=shortStop, qty = i_contracts/2)
    strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)

if not can_trade_today
    strategy.close_all("Daily PNL limits exceeded")

/// Handle breakeven after partial exit
if strategy.position_size ==  i_contracts/2 // Long position
    longStop := strategy.position_avg_price + i_breakeven_pts
    strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)
    longTarget1 := na
else if strategy.position_size == -i_contracts/2 // Short position
    shortStop := strategy.position_avg_price - i_breakeven_pts
    strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)
    shortTarget1 := na

// Handle Breakeven after market move to a certain points
if i_market_mv_to_BE
    if high >= strategy.position_avg_price + i_pts_to_BE
        longStop := strategy.position_avg_price + i_breakeven_pts
        strategy.exit(id="Long Exit #1",  from_entry="Long",  limit=longTarget1, stop=longStop, qty = i_contracts/2)
        strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)
    else if low <= strategy.position_avg_price - i_pts_to_BE
        strategy.exit(id="Short Exit #1", from_entry="Short", limit=shortTarget1, stop=shortStop, qty = i_contracts/2)
        strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)

// Reset tradeSize when position is closed
if strategy.position_size == 0
    tradeSize := na

// Plot entry markers
plotshape(buySignal, title="Buy Signal", text="BUY", 
  style=shape.labelup, location=location.belowbar, 
  color=color.new(color.green, 0), textcolor=color.white, size=size.small)

plotshape(sellSignal, title="Sell Signal", text="SELL", 
  style=shape.labeldown, location=location.abovebar, 
  color=color.new(color.red, 0), textcolor=color.white, size=size.small)

// Draw stops & targets
plot(strategy.position_size > 0 ? longStop : na,   color=color.red,   style=plot.style_linebr, title="Stop Loss")
plot(strategy.position_size > 0 ? longTarget1 : na, color=color.green, style=plot.style_linebr, title="Long Profit Target 1")
plot(strategy.position_size > 0 ? longTarget2 : na, color=color.green, style=plot.style_linebr, title="Long Profit Target 2")

plot(strategy.position_size < 0 ? shortStop : na,   color=color.red,   style=plot.style_linebr, title="Stop Loss")
plot(strategy.position_size < 0 ? shortTarget1 : na, color=color.green, style=plot.style_linebr, title="Short Profit Target 1")
plot(strategy.position_size < 0 ? shortTarget2 : na, color=color.green, style=plot.style_linebr, title="Short Profit Target 2")


// Debugging
[dip, din, adx] = request.security(syminfo.tickerid, "1", dmiWrapper(i_dmiLength_tf1), barmerge.gaps_on, barmerge.lookahead_on)
[dip5, din5, adx5] = request.security(syminfo.tickerid, "5", dmiWrapper(i_dmiLength_tf5), barmerge.gaps_on, barmerge.lookahead_on)
[dip15, din15, adx15] = request.security(syminfo.tickerid, "15", dmiWrapper(i_dmiLength_tf15), barmerge.gaps_on, barmerge.lookahead_on)

plotchar(dip, 'dip', " ", color = color.green)
plotchar(dip5, 'dip5m', " ", color = color.green)
plotchar(dip15, 'dip15m', " ", color = color.green)

plotchar(din, 'din', " ", color = color.red)
plotchar(din5, 'din5m', " ", color =  color.red)
plotchar(din15, 'din15m', " ", color =  color.red)

plotchar(adx, 'adx', " ", color = color.blue)
plotchar(adx5, 'adx5m', " ", color =  color.blue)
plotchar(adx15, 'adx15m', " ", color =  color.blue)

dmiSignal = conditionType == 'DMI' ? (dmibuyTrigger ? 1 : dmisellTrigger ? -1 : na) : na
plotchar(dmiSignal, 'DMI Signal', "", color = dmiSignal == 1 ? color.green : dmiSignal == -1 ? color.red : na)
tascSignal = useTASC_SE ? (TASCbuyCondition ? 1 : TASCsellConditon ? -1 : na) : na
plotchar(tascSignal, 'TASC Entry Signal', "", color = tascSignal == 1 ? color.green : tascSignal == -1 ? color.red : na)
adxSignal = conditionType == 'ADX' ? (adxbuyCond ? 1 : adxsellCond ? -1 : na) : na
plotchar(adxSignal, 'ADX Signal', "", color = adxSignal == 1 ? color.green : adxSignal == -1 ? color.red : na)

plotchar(dmibuyTrigger, 'dmibuyCond', " ")
plotchar(dmibuyTrigger[1], 'dmibuyCond[1]', " ")

// --- Buy Continuation Signal ---
show_TASC_CE_buy = useTASC_CE and TASC_Cont_buyCond and strategy.position_size == 0 and time_sess_good and buySignal
plotshape(show_TASC_CE_buy, title="TASC Cont. Buy Signal", text="Cont. Buy",
     style=shape.labeldown, location=location.abovebar,
     color=color.new(color.green, 0), textcolor=color.white, size=size.small)

// --- Sell Continuation Signal ---
show_TASC_CE_sell = useTASC_CE and TASC_Cont_sellCond and strategy.position_size == 0 and time_sess_good and sellSignal
plotshape(show_TASC_CE_sell, title="TASC Cont. Sell Signal", text="Cont. Sell",
     style=shape.labelup, location=location.belowbar,
     color=color.new(color.red, 0), textcolor=color.white, size=size.small)


// ===== CREATE DMI/ADX DISPLAY TABLE ===== //

// === 1. Add a toggle input to control visibility ===
showDmiTable = input.bool(false, "Show DMI/ADX Table", group="Display Options")

// === 2. Create table only once ===
var table dmiTable = na
if bar_index == 0 and showDmiTable
    dmiTable := table.new(position.top_right, 5, 4, border_width=1, bgcolor=color.rgb(33, 40, 48))

// Initialize table on first bar
if not na(dmiTable) and showDmiTable
    // Headers
    table.cell(dmiTable, 0, 0, "TF", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 1, 0, "+DI", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 2, 0, "-DI", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 3, 0, "ADX", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 4, 0, "Signal", bgcolor=color.gray, text_color=color.white)
    
    // Initialize all cells (required for updates)
    for row = 1 to 3
        table.cell(dmiTable, 0, row, "")
        table.cell(dmiTable, 1, row, "")
        table.cell(dmiTable, 2, row, "")
        table.cell(dmiTable, 3, row, "")
        table.cell(dmiTable, 4, row, "")

    // Update DMI values for 1m timeframe
    table.cell_set_text(dmiTable, 0, 1, "1m")
    table.cell_set_text(dmiTable, 1, 1, str.tostring(dip, "#.##"))
    table.cell_set_text(dmiTable, 2, 1, str.tostring(din, "#.##"))
    table.cell_set_text(dmiTable, 3, 1, str.tostring(adx, "#.##"))

    // Color coding for +DI/-DI
    plusDIcolor = dip >= din ? color.lime : color.silver
    minusDIcolor = din > dip ? color.red : color.silver
    adxColor = adx >= 25 ? color.orange : color.silver

    table.cell_set_text_color(dmiTable, 1, 1, plusDIcolor)
    table.cell_set_text_color(dmiTable, 2, 1, minusDIcolor)
    table.cell_set_text_color(dmiTable, 3, 1, adxColor)

    signal = 
         dip >= 25 and dip > din ? "Bull" : 
         din >= 25 and din > dip ? "Bear" : "Neutral"
    table.cell_set_text(dmiTable, 4, 1, signal)
    table.cell_set_text_color(dmiTable, 4, 1, signal == "Bull" ? color.lime : signal == "Bear" ? color.red : color.gray)

    // Update DMI values for 5m timeframe
    table.cell_set_text(dmiTable, 0, 2, "5m")
    table.cell_set_text(dmiTable, 1, 2, str.tostring(dip5, "#.##"))
    table.cell_set_text(dmiTable, 2, 2, str.tostring(din5, "#.##"))
    table.cell_set_text(dmiTable, 3, 2, str.tostring(adx5, "#.##"))

    plusDIcolor5 = dip5 >= din5 ? color.lime : color.silver
    minusDIcolor5 = din5 >= dip5 ? color.red : color.silver
    adxColor5 = adx5 >= 25 ? color.orange : color.silver

    table.cell_set_text_color(dmiTable, 1, 2, plusDIcolor5)
    table.cell_set_text_color(dmiTable, 2, 2, minusDIcolor5)
    table.cell_set_text_color(dmiTable, 3, 2, adxColor5)

    signal5 = 
         dip5 >= 25 and dip5 > din5 ? "Bull" : 
         din5 >= 25 and din5 > dip5 ? "Bear" : "Neutral"
    table.cell_set_text(dmiTable, 4, 2, signal5)
    table.cell_set_text_color(dmiTable, 4, 2, signal5 == "Bull" ? color.lime : signal5 == "Bear" ? color.red : color.gray)

    // Update DMI values for 15m timeframe
    table.cell_set_text(dmiTable, 0, 3, "15m")
    table.cell_set_text(dmiTable, 1, 3, str.tostring(dip15, "#.##"))
    table.cell_set_text(dmiTable, 2, 3, str.tostring(din15, "#.##"))
    table.cell_set_text(dmiTable, 3, 3, str.tostring(adx15, "#.##"))

    // Color coding for +DI/-DI
    plusDIcolor15 = dip15 >= din15 ? color.lime : color.silver
    minusDIcolor15 = din15 > dip15 ? color.red : color.silver
    adxColor15 = adx15 >= 25 ? color.orange : color.silver

    table.cell_set_text_color(dmiTable, 1, 3, plusDIcolor15)
    table.cell_set_text_color(dmiTable, 2, 3, minusDIcolor15)
    table.cell_set_text_color(dmiTable, 3, 3, adxColor15)

    // Signal status for 15m
    signal15 = 
         dip15 >= 25 and dip15 > din15 ? "Bull" : 
         din15 >= 25 and din15 > dip15 ? "Bear" : "Neutral"
    table.cell_set_text(dmiTable, 4, 3, signal15)
    table.cell_set_text_color(dmiTable, 4, 3, signal15 == "Bull" ? color.lime : signal15 == "Bear" ? color.red : color.gray)
