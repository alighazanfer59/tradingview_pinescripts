// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© pidepython / https://www.fiverr.com/alighazanfer59/build-algotrading-backtesting-screening-data-tools

//@version=6
strategy("DMI Trintiy Strategy", overlay=true, default_qty_type=strategy.fixed, default_qty_value=2)

//========== PHASE 1: CORE FRAMEWORK ==========//
//--- 3. Indicator Parameters ---//
i_dmiLength = input.int(9, "Length", minval=1, group="DMI/ADX Settings", tooltip = "Indicator Settings on chart timeframe")
i_dmiSmoothing = input.int(9, "Welders's Avg.", minval=1, group="DMI/ADX Settings", tooltip = "Indicator Settings on chart timeframe")
i_dmiThreshold = input.int(25, "DMI/ ADX Threshold.", minval=1, group="DMI/ADX Settings", tooltip = "Threshold value of DMI or ADX to trigger entry conditions")
i_atrLength = input.int(10, "ATR Length", minval=1, group = "TASC Indicator Settings", tooltip = "TASC supertrend Calculation, a lower value will make the system more sensitive to trend reversal")
i_mult = input.float(3.0, "Multiplier", minval=0.1, step=0.1, group = "TASC Indicator Settings", tooltip = "TASC supertrend Calculation, a lower value will make the system more sensitive to trend reversal")

//--- 1. Timeframe Selection ---//
tf2 = input.bool(false, "2 Minutes:     ", group="Timeframe Selection", inline="1", display = display.none)
i_dmiLength_tf2 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "1")
i_dmiSmoothing_tf2 = input.int(14, "W. Avg.", minval=1, group="Timeframe Selection", inline = "1")
tf3 = input.bool(false, "3 Minutes:     ", group="Timeframe Selection", inline="2", display = display.none)
i_dmiLength_tf3 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "2")
i_dmiSmoothing_tf3 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "2")
tf5 = input.bool(true, "5 Minutes:      ", group="Timeframe Selection", inline="3", display = display.none)
i_dmiLength_tf5 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "3")
i_dmiSmoothing_tf5 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "3")
tf15 = input.bool(true, "15 Minutes:        ", group="Timeframe Selection", inline="4", display = display.none)
i_dmiLength_tf15 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "4")
i_dmiSmoothing_tf15 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "4")
tf30 = input.bool(false, "30 Minutes:       ", group="Timeframe Selection", inline="5", display = display.none)
i_dmiLength_tf30 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "5")
i_dmiSmoothing_tf30 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "5")
tf60 = input.bool(false, "1 Hour:       ", group="Timeframe Selection", inline="6", display = display.none)
i_dmiLength_tf60 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "6")
i_dmiSmoothing_tf60 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "6")
tf240 = input.bool(false, "4 Hours:     ", group="Timeframe Selection", inline="7", display = display.none)
i_dmiLength_tf240 = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "7")
i_dmiSmoothing_tf240 = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "7")
tfD = input.bool(false, "Daily:     ", group="Timeframe Selection", inline="8", display = display.none)
i_dmiLength_tfD = input.int(14, "Length", minval=1, group="Timeframe Selection", inline = "8")
i_dmiSmoothing_tfD = input.int(14, "W.Avg.", minval=1, group="Timeframe Selection", inline = "8")


//--- 2. Condition Type Selection ---//
conditionType = input.string("DMI", "Condition Type", options=["DMI", "ADX"], group="Strategy Settings")

//--- 4. Trigger Conditions ---//
useTASC_SE = input.bool(false, "TASC Entry Signal", group="Trigger Settings")
useTASC_CE = input.bool(false, "TASC Continuation", group="Trigger Settings")

//--- 5. Trading Session ---//
in_time_sess_en = input.bool(true, "Limit trading hours?", group = "Time Settings")
in_time_sess = input.session("0930-1600", "Session hours", group = "Time Settings")
t = time(timeframe.period, in_time_sess)
time_sess_good = in_time_sess_en ? time == t : true
bgcolor((time == t and  in_time_sess_en) ? color.rgb(167, 175, 167) : na)

//--- 6. Trade Management ---//
i_contracts = input.int(2, "Contract Quantity", minval=1, group="Trade Management")
i_tp1_pts = input.int(20, "Take Profit (TP1) Points", minval=1, group="Trade Management")
i_tp2_pts = input.int(40, "Take Profit (TP2) Points", minval=1, group="Trade Management")
i_slPoints = input.int(20, "Stop Loss Points", minval=1, group="Trade Management")
i_breakeven_pts = input.int(3, "Breakeven Points", minval=0, group="Trade Management")
i_market_mv_to_BE = input.bool(false, "Enable Move to Breakeven", group="Trade Management")
i_pts_to_BE = input.int(10, "Points to Trigger Breakeven", group="Trade Management")
i_daily_profit_target = input.float(10000.0, "Daily Profit Target (USD)", minval=100.0, step = 100.0, group = "Trade Management")
i_daily_loss_limit = input.float(10000.0, "Daily Loss Limit (USD)", minval=100.0, step = 100.0, group = "Trade Management")


// === Daily PnL Tracking Based on End-of-Day Equity === //
var float equity_at_yesterday_close = na
var float equity_at_today_open = na
var float daily_pnl = 0.0
var bool can_trade_today = true

// Detect new day by change in dayofyear
var int last_day = dayofmonth
bool is_new_day = dayofmonth != last_day
if is_new_day
    equity_at_yesterday_close := nz(strategy.equity[1])
    equity_at_today_open := strategy.equity
    last_day := dayofmonth

// Update daily_pnl continuously throughout the day
daily_pnl := strategy.equity - equity_at_today_open

// Disable trading if outside limits
can_trade_today := (daily_pnl < i_daily_profit_target) and (daily_pnl > -i_daily_loss_limit)

// ================================================================================== INDICATOR CODE ===============================================================================================================

// TASC calculation:

float multi  = i_mult  // (reuse the i_mult input)
int   length = i_atrLength  // (reuse the i_atrLength input)

[st, dir] = ta.supertrend(multi, length)

var bool isNewTrend = false
isNewTrend := ta.change(dir) != 0

plot(dir < 0 ? st : na, "Up direction", color = color.green, style=plot.style_steplinebr, linewidth = 4)
plot(dir > 0 ? st : na, "Down direction", color = color.red, style=plot.style_steplinebr, linewidth = 4)

// Trading signals
bool TASCbuyCondition = useTASC_SE ? isNewTrend and dir == -1 : true
bool TASCsellConditon = useTASC_SE ? isNewTrend and dir == 1 : true

// ===== PHASE 2: MTF DMI/ADX LOGIC ===== //
// Initialize condition arrays

// DMI Wrapper
dmiWrapper(length, smoothing) =>
    [dip, din, adx] = ta.dmi(length, smoothing)
    [dip, din, adx]

getDmiAdx(tfStr, enabled, len, smooth) =>
    var float dip = na
    var float din = na
    var float adx = na
    var dmiBuy = true
    var dmiSell = true
    var adxBuy = true
    var adxSell = true

    if enabled
        [dip, din, adx] = request.security(syminfo.tickerid, tfStr, dmiWrapper(len, smooth))
        dmiBuy := not na(dip) and not na(din) and dip > din and dip >= i_dmiThreshold
        dmiSell := not na(dip) and not na(din) and dip < din and din >= i_dmiThreshold
        adxBuy := not na(adx) and dip > din and adx >= i_dmiThreshold
        adxSell := not na(adx) and dip < din and adx >= i_dmiThreshold

    [dip, din, adx, dmiBuy, dmiSell, adxBuy, adxSell]

[dip2m, din2m, adx2m, dmibuyCond2m, dmisellCond2m, adxbuyCond2m, adxsellCond2m] = getDmiAdx("2", tf2, i_dmiLength_tf2, i_dmiSmoothing_tf2)
[dip3m, din3m, adx3m, dmibuyCond3m, dmisellCond3m, adxbuyCond3m, adxsellCond3m] = getDmiAdx("3", tf3, i_dmiLength_tf3, i_dmiSmoothing_tf3)
[dip5m, din5m, adx5m, dmibuyCond5m, dmisellCond5m, adxbuyCond5m, adxsellCond5m] = getDmiAdx("5", tf5, i_dmiLength_tf5, i_dmiSmoothing_tf5)
[dip15m, din15m, adx15m, dmibuyCond15m, dmisellCond15m, adxbuyCond15m, adxsellCond15m] = getDmiAdx("15", tf15, i_dmiLength_tf15, i_dmiSmoothing_tf15)
[dip30m, din30m, adx30m, dmibuyCond30m, dmisellCond30m, adxbuyCond30m, adxsellCond30m] = getDmiAdx("30", tf30, i_dmiLength_tf30, i_dmiSmoothing_tf30)
[dip60m, din60m, adx60m, dmibuyCond60m, dmisellCond60m, adxbuyCond60m, adxsellCond60m] = getDmiAdx("60", tf60, i_dmiLength_tf60, i_dmiSmoothing_tf60)
[dip240m, din240m, adx240m, dmibuyCond240m, dmisellCond240m, adxbuyCond240m, adxsellCond240m] = getDmiAdx("240", tf240, i_dmiLength_tf240, i_dmiSmoothing_tf240)
[dipD, dinD, adxD, dmibuyCondD, dmisellCondD, adxbuyCondD, adxsellCondD] = getDmiAdx("D", tfD, i_dmiLength_tfD, i_dmiSmoothing_tfD)

// ---- Timeframe: Chart timeframe (base conditions) ----

[dip, din, adx] = dmiWrapper(i_dmiLength, i_dmiSmoothing)

// Final DMI Buy Condition
dmibuyCond = conditionType != 'DMI' or
     (dip > din and dip >= i_dmiThreshold and
     dmibuyCond2m and dmibuyCond3m and dmibuyCond5m and dmibuyCond15m and
     dmibuyCond30m and dmibuyCond60m and dmibuyCond240m and dmibuyCondD)

// Final DMI Sell Condition
dmisellCond = conditionType != 'DMI' or
     (din > dip and din >= i_dmiThreshold and
     dmisellCond2m and dmisellCond3m and dmisellCond5m and dmisellCond15m and
     dmisellCond30m and dmisellCond60m and dmisellCond240m and dmisellCondD)

// Final ADX Buy Condition
adxbuyCond = conditionType != 'ADX' or
     (dip > din and adx >= i_dmiThreshold and
     adxbuyCond2m and adxbuyCond3m and adxbuyCond5m and adxbuyCond15m and
     adxbuyCond30m and adxbuyCond60m and adxbuyCond240m and adxbuyCondD)

// Final ADX Sell Condition
adxsellCond = conditionType != 'ADX' or
     (dip < din and adx >= i_dmiThreshold and
     adxsellCond2m and adxsellCond3m and adxsellCond5m and adxsellCond15m and
     adxsellCond30m and adxsellCond60m and adxsellCond240m and adxsellCondD)


// TASC continuation signal
barsSinceNewTrend = ta.barssince(isNewTrend) + 1
trend_sw_high = not na(barsSinceNewTrend) ? ta.highest(high, barsSinceNewTrend) : na
trend_sw_low = not na(barsSinceNewTrend) ? ta.lowest(low, barsSinceNewTrend) : na

TASC_Cont_buyCond = (st > st[1] and dir == -1 and trend_sw_high > trend_sw_high[1]) or not useTASC_CE
TASC_Cont_sellCond = (st < st[1] and dir == 1 and trend_sw_low < trend_sw_low[1]) or not useTASC_CE

// =============================================================================== ENTRY SIGNALS ====================================================================================== //
// Existing signal definitions
buySignal = (TASCbuyCondition or TASC_Cont_buyCond) and dmibuyCond and adxbuyCond and 
     can_trade_today and time_sess_good and strategy.position_size == 0
     
sellSignal = (TASCsellConditon or TASC_Cont_sellCond) and dmisellCond and adxsellCond and
     can_trade_today and time_sess_good and strategy.position_size == 0

// Save stops & targets
var float longStop = na
var float shortStop = na
var float longTarget1 = na
var float shortTarget1 = na
var float longTarget2 = na
var float shortTarget2 = na
var float tradeSize = na

// Strategy execution
if buySignal 
    strategy.entry("Long", strategy.long, qty=i_contracts)
    longStop := na
    longTarget1 := na
    longTarget2 := na

if sellSignal
    strategy.entry("Short", strategy.short, qty=i_contracts)
    shortStop := na
    shortTarget1 := na
    shortTarget2 := na

// Handle long stops & target calculation
if strategy.position_size > 0 and na(longStop)
    longStop := strategy.position_avg_price - i_slPoints
    longTarget1 := strategy.position_avg_price + i_tp1_pts
    longTarget2 := strategy.position_avg_price + i_tp2_pts
    tradeSize := strategy.position_size
    strategy.exit(id="Long Exit #1",  from_entry="Long",  limit=longTarget1, stop=longStop, qty = i_contracts/2)
    strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)

// Handle short stops & target calculation
if strategy.position_size < 0 and na(shortStop)
    shortStop := strategy.position_avg_price + i_slPoints
    shortTarget1 := strategy.position_avg_price - i_tp1_pts
    shortTarget2 := strategy.position_avg_price - i_tp2_pts
    tradeSize := strategy.position_size
    strategy.exit(id="Short Exit #1", from_entry="Short", limit=shortTarget1, stop=shortStop, qty = i_contracts/2)
    strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)

if not can_trade_today
    strategy.close_all("Daily PNL limits exceeded")

/// Handle breakeven after partial exit
if strategy.position_size ==  i_contracts/2 // Long position
    longStop := strategy.position_avg_price + i_breakeven_pts
    strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)
    longTarget1 := na
else if strategy.position_size == -i_contracts/2 // Short position
    shortStop := strategy.position_avg_price - i_breakeven_pts
    strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)
    shortTarget1 := na

// Handle Breakeven after market move to a certain points
if i_market_mv_to_BE
    if high >= strategy.position_avg_price + i_pts_to_BE
        longStop := strategy.position_avg_price + i_breakeven_pts
        strategy.exit(id="Long Exit #1",  from_entry="Long",  limit=longTarget1, stop=longStop, qty = i_contracts/2)
        strategy.exit(id="Long Exit #2",  from_entry="Long",  limit=longTarget2, stop=longStop, qty_percent=100)
    else if low <= strategy.position_avg_price - i_pts_to_BE
        strategy.exit(id="Short Exit #1", from_entry="Short", limit=shortTarget1, stop=shortStop, qty = i_contracts/2)
        strategy.exit(id="Short Exit #2", from_entry="Short", limit=shortTarget2, stop=shortStop, qty_percent=100)

// Reset tradeSize when position is closed
if strategy.position_size == 0
    tradeSize := na

// Plot entry markers
plotshape(buySignal, title="Buy Signal", text="BUY", 
  style=shape.labelup, location=location.belowbar, 
  color=color.new(color.green, 0), textcolor=color.white, size=size.small)

plotshape(sellSignal, title="Sell Signal", text="SELL", 
  style=shape.labeldown, location=location.abovebar, 
  color=color.new(color.red, 0), textcolor=color.white, size=size.small)

// Draw stops & targets
plot(strategy.position_size > 0 ? longStop : na,   color=color.red,   style=plot.style_linebr, title="Stop Loss")
plot(strategy.position_size > 0 ? longTarget1 : na, color=color.green, style=plot.style_linebr, title="Long Profit Target 1")
plot(strategy.position_size > 0 ? longTarget2 : na, color=color.green, style=plot.style_linebr, title="Long Profit Target 2")

plot(strategy.position_size < 0 ? shortStop : na,   color=color.red,   style=plot.style_linebr, title="Stop Loss")
plot(strategy.position_size < 0 ? shortTarget1 : na, color=color.green, style=plot.style_linebr, title="Short Profit Target 1")
plot(strategy.position_size < 0 ? shortTarget2 : na, color=color.green, style=plot.style_linebr, title="Short Profit Target 2")


// Debugging
// var float dip5 = na, float din5 = na, float adx5 = na
// var float dip15 = na, float din15 = na, float adx15 = na

[dip5, din5, adx5] = request.security(syminfo.tickerid, "5", dmiWrapper(i_dmiLength_tf5, i_dmiSmoothing_tf5))
[dip15, din15, adx15] = request.security(syminfo.tickerid, "15", dmiWrapper(i_dmiLength_tf15, i_dmiSmoothing_tf15))

plotchar(dip, 'dip', " ", color = color.green)
plotchar(dip5, 'dip5m', " ", color = color.green)
plotchar(dip15, 'dip15m', " ", color = color.green)

plotchar(din, 'din', " ", color = color.red)
plotchar(din5, 'din5m', " ", color =  color.red)
plotchar(din15, 'din15m', " ", color =  color.red)

plotchar(adx, 'adx', " ", color = color.blue)
plotchar(adx5, 'adx5m', " ", color =  color.blue)
plotchar(adx15, 'adx15m', " ", color =  color.blue)

dmiSignal = conditionType == 'DMI' ? (dmibuyCond ? 1 : dmisellCond ? -1 : na) : na
plotchar(dmiSignal, 'DMI Signal', "", color = dmiSignal == 1 ? color.green : dmiSignal == -1 ? color.red : na)
tascSignal = useTASC_SE ? (TASCbuyCondition ? 1 : TASCsellConditon ? -1 : na) : na
plotchar(tascSignal, 'TASC Entry Signal', "", color = tascSignal == 1 ? color.green : tascSignal == -1 ? color.red : na)
adxSignal = conditionType == 'ADX' ? (adxbuyCond ? 1 : adxsellCond ? -1 : na) : na
plotchar(adxSignal, 'ADX Signal', "", color = adxSignal == 1 ? color.green : adxSignal == -1 ? color.red : na)

// plotchar(trend_sw_high, 'Current trend high', " ")

// --- Buy Continuation Signal ---
show_TASC_CE_buy = useTASC_CE and TASC_Cont_buyCond
plotshape(show_TASC_CE_buy, title="TASC Cont. Buy Signal", text="Cont. Buy",
     style=shape.labeldown, location=location.abovebar,
     color=color.new(color.green, 0), textcolor=color.white, size=size.small)

// --- Sell Continuation Signal ---
show_TASC_CE_sell = useTASC_CE and TASC_Cont_sellCond
plotshape(show_TASC_CE_sell, title="TASC Cont. Sell Signal", text="Cont. Sell",
     style=shape.labelup, location=location.belowbar,
     color=color.new(color.red, 0), textcolor=color.white, size=size.small)


// ===== CREATE DMI/ADX DISPLAY TABLE ===== //
var table dmiTable = table.new(position.top_right, 5, 4, border_width=1, bgcolor=color.rgb(33, 40, 48))

// Initialize table on first bar
if barstate.isfirst
    // Headers
    table.cell(dmiTable, 0, 0, "TF", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 1, 0, "+DI", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 2, 0, "-DI", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 3, 0, "ADX", bgcolor=color.gray, text_color=color.white)
    table.cell(dmiTable, 4, 0, "Signal", bgcolor=color.gray, text_color=color.white)
    
    // Initialize all cells (required for updates)
    for row = 1 to 3
        table.cell(dmiTable, 0, row, "")
        table.cell(dmiTable, 1, row, "")
        table.cell(dmiTable, 2, row, "")
        table.cell(dmiTable, 3, row, "")
        table.cell(dmiTable, 4, row, "")

// Update DMI values for 1m timeframe
table.cell_set_text(dmiTable, 0, 1, "1m")
table.cell_set_text(dmiTable, 1, 1, str.tostring(dip, "#.##"))
table.cell_set_text(dmiTable, 2, 1, str.tostring(din, "#.##"))
table.cell_set_text(dmiTable, 3, 1, str.tostring(adx, "#.##"))

// Color coding for +DI/-DI
plusDIcolor = dip >= din ? color.lime : color.silver
minusDIcolor = din > dip ? color.red : color.silver
adxColor = adx >= 25 ? color.orange : color.silver

table.cell_set_text_color(dmiTable, 1, 1, plusDIcolor)
table.cell_set_text_color(dmiTable, 2, 1, minusDIcolor)
table.cell_set_text_color(dmiTable, 3, 1, adxColor)

signal = 
  dip >= 25 and dip > din ? "Bull" : 
  din >= 25 and din > dip ? "Bear" : "Neutral"
table.cell_set_text(dmiTable, 4, 1, signal)
table.cell_set_text_color(dmiTable, 4, 1, signal == "Bull" ? color.lime : signal == "Bear" ? color.red : color.gray)

// Update DMI values for 5m timeframe
table.cell_set_text(dmiTable, 0, 2, "5m")
table.cell_set_text(dmiTable, 1, 2, str.tostring(dip5, "#.##"))
table.cell_set_text(dmiTable, 2, 2, str.tostring(din5, "#.##"))
table.cell_set_text(dmiTable, 3, 2, str.tostring(adx5, "#.##"))

plusDIcolor5 = dip5 >= din5 ? color.lime : color.silver
minusDIcolor5 = din5 >= dip5 ? color.red : color.silver
adxColor5 = adx5 >= 25 ? color.orange : color.silver

table.cell_set_text_color(dmiTable, 1, 2, plusDIcolor5)
table.cell_set_text_color(dmiTable, 2, 2, minusDIcolor5)
table.cell_set_text_color(dmiTable, 3, 2, adxColor5)

signal5 = 
  dip5 >= 25 and dip5 > din5 ? "Bull" : 
  din5 >= 25 and din5 > dip5 ? "Bear" : "Neutral"
table.cell_set_text(dmiTable, 4, 2, signal5)
table.cell_set_text_color(dmiTable, 4, 2, signal5 == "Bull" ? color.lime : signal5 == "Bear" ? color.red : color.gray)

// Update DMI values for 15m timeframe
table.cell_set_text(dmiTable, 0, 3, "15m")
table.cell_set_text(dmiTable, 1, 3, str.tostring(dip15, "#.##"))
table.cell_set_text(dmiTable, 2, 3, str.tostring(din15, "#.##"))
table.cell_set_text(dmiTable, 3, 3, str.tostring(adx15, "#.##"))

// Color coding for +DI/-DI
plusDIcolor15 = dip15 >= din15 ? color.lime : color.silver
minusDIcolor15 = din15 > dip15 ? color.red : color.silver
adxColor15 = adx15 >= 25 ? color.orange : color.silver

table.cell_set_text_color(dmiTable, 1, 3, plusDIcolor15)
table.cell_set_text_color(dmiTable, 2, 3, minusDIcolor15)
table.cell_set_text_color(dmiTable, 3, 3, adxColor15)

// Signal status for 15m
signal15 = 
  dip15 >= 25 and dip15 > din15 ? "Bull" : 
  din15 >= 25 and din15 > dip15 ? "Bear" : "Neutral"
table.cell_set_text(dmiTable, 4, 3, signal15)
table.cell_set_text_color(dmiTable, 4, 3, signal15 == "Bull" ? color.lime : signal15 == "Bear" ? color.red : color.gray)
